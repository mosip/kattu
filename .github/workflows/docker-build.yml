name: Build docker and push image to Docker Hub

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      SERVICE_LOCATION:
        required: true
        type: string
      ZIP_FILENAME:
        required: true
        type: string
      NPM_BUILD:
        required: false
        type: boolean
        default: false

    secrets:
      RELEASE_DOCKER_HUB:
        required: true
      ACTOR_DOCKER_HUB:
        required: true
      DEV_NAMESPACE_DOCKER_HUB:
        required: true

jobs:
  build-dockers:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.DEV_NAMESPACE_DOCKER_HUB }}
      SERVICE_LOCATION: ${{ inputs.SERVICE_LOCATION }}
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
    name: "docker_${{ needs.find-dockers.outputs.docker-matrix }}"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: ${{ inputs.ZIP_FILENAME }}
          path: ./

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV  

      - name: Get version info from pom
        if: ${{ contains(inputs.NPM_BUILD, 'false') }}
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract for maven
        if: ${{ contains(inputs.NPM_BUILD, 'false') }}
        run: unzip -uj "./${{ inputs.ZIP_FILENAME }}.zip" "${{ inputs.SERVICE_LOCATION }}/target/*" -d "./${{ inputs.SERVICE_LOCATION }}/target"

      - name: Unzip and extract for npm
        if: ${{ contains(inputs.NPM_BUILD, 'true') }}
        run: |
          mkdir -p "${{ inputs.SERVICE_LOCATION }}"
          unzip "./${{ inputs.ZIP_FILENAME }}.zip" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --build-arg SOURCE=mosip --build-arg COMMIT_HASH=$(git rev-parse HEAD) --build-arg COMMIT_ID=$(git rev-parse --short HEAD) --build-arg BUILD_TIME=${{steps.date.outputs.date}} --file Dockerfile --tag ${{ env.SERVICE_NAME }}

      - name: Log into registry
        run: echo "${{secrets.RELEASE_DOCKER_HUB}}" | docker login -u ${{secrets.ACTOR_DOCKER_HUB}} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          if [[ $BRANCH_NAME == master ]]; then
          VERSION=latest
          else
          VERSION=$BRANCH_NAME
          fi
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }} # required
        if: failure() # Pick up events even if the job fails or is canceled. 