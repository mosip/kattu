name: NPM Sonar Analysis

on:
  workflow_call:
    inputs:
      SERVICE_LOCATION:
        required: true
        type: string
      NODE_VERSION:
        default: '14'
        type: string
      SONAR_URL:
        required: false
        type: string
        default: 'https://sonarcloud.io'
      PROJECT_KEY:
        required: false
        type: string
        default: "mosip_${{ github.event.repository.name }}"
      NPM_BUILD_TYPE:
        required: false
        type: string
        default: 'NG'
      SONAR_SOURCES:
        required: false
        type: string
        default: 'src'
      SONAR_TESTS:
        required: false
        type: string
        default: 'src'
      SONAR_TEST_INCLUSIONS:
        required: false
        type: string
        default: '**/*.spec.ts'
      SONAR_EXCLUSIONS:
        required: false
        type: string
        default: '**/node_modules/**'
      SONAR_ARGS:
        required: false
        type: string
        default: ""
    secrets:
      SONAR_TOKEN:
        required: true
      ORG_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ORG_KEY: ${{ secrets.ORG_KEY }}

jobs:
  npm-sonar-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.NODE_VERSION }}
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'
    - name: Cache npm dependencies
      uses: actions/cache@v2
      with:
        path: '~/.npm'
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Cache SonarCloud packages
      uses: actions/cache@v3.3.1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-sonar-

    - name: npm install
      run: cd ${{ inputs.SERVICE_LOCATION }} && npm install

    - name: NPM Build for NG
      if: ${{ inputs.NPM_BUILD_TYPE == 'NG' }}
      run: cd ${{ inputs.SERVICE_LOCATION }} && npm run-script build -- --prod --base-href . --output-path=dist

    - name: NPM Build for BOB
      if: ${{ inputs.NPM_BUILD_TYPE == 'BOB' }}
      run: |
        cd ${{ inputs.SERVICE_LOCATION }} && npm run build

    - name: Setup branch and env
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

    - name: setup sonar properties
      run: |
        if [[ -z $SONAR_TOKEN ]]; then
          echo "\$SONAR_TOKEN environmental variable not set; EXITING;";
          exit 1;
        fi
        if [[ -z $ORG_KEY ]]; then
          echo "\$ORG_KEY environmental variable not set; EXITING;";
          exit 1;
        fi
        if [[ -z $SONAR_URL ]]; then
          echo "\$SONAR_URL environmental variable not set; EXITING;";
          exit 1;
        fi
  
        cd "./${{inputs.SERVICE_LOCATION}}"
        
        echo "
          sonar.host.url=${{ inputs.SONAR_URL }}
          sonar.projectKey=${{ inputs.PROJECT_KEY }}
          sonar.sourceEncoding=UTF-8
          sonar.sources=${{ inputs.SONAR_SOURCES }}
          sonar.exclusions=${{ inputs.SONAR_EXCLUSIONS }}
          sonar.tests=${{ inputs.SONAR_TESTS }}
          sonar.test.inclusions=${{ inputs.SONAR_TEST_INCLUSIONS }}
          sonar.typescript.lcov.reportPaths=coverage/lcov.info" >> sonar-project.properties
      env:
        SONAR_URL: ${{ inputs.SONAR_URL }}

    - name: run sonar analysis
      run: |
        cd "./${{inputs.SERVICE_LOCATION}}"     
        npm install sonar-scanner && npm run sonar -- -Dsonar.login=${{ env.SONAR_TOKEN }} -Dsonar.organization=${{ env.ORG_KEY }} ${{ inputs.SONAR_ARGS }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,author,commit,workflow,job # selectable (default: repo,message)
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      if: "${{ github.event_name != 'pull_request' && failure() }}" # Pick up events even if the job fails or is canceled.
