name: Maven build

on:
  workflow_call:
    inputs:
      SERVICE_LOCATION:
        required: true
        type: string
      BUILD_ARTIFACT:
        required: true
        type: string
      MAVEN_NON_EXEC_ARTIFACTS:
        required: false
        type: string 
    secrets:
      OSSRH_USER:
        required: true
      OSSRH_SECRET:
        required: true
      OSSRH_TOKEN:
        required: true
      GPG_SECRET:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Setup branch and env
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV  

    - name: Setup branch and GPG public key
      run: |
        # Strip git ref prefix from version
        echo ${{ env.BRANCH_NAME }}
        echo ${{ env.GPG_TTY }}
        sudo apt-get --yes install gnupg2
        gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
        gpg2 --quiet --batch --passphrase=${{secrets.GPG_SECRET}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg 

    - name: Install xmlstartlet and xmllint
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo apt-get install xmlstarlet libxml2-utils

    - name: Setup the settings file for ossrh server
      run: echo "<settings><servers><server><id>ossrh</id><username>${{secrets.OSSRH_USER}}</username><password>${{secrets.OSSRH_SECRET}}</password></server></servers><profiles><profile><id>ossrh</id><activation><activeByDefault>true</activeByDefault></activation><properties><gpg.executable>gpg2</gpg.executable><gpg.passphrase>${{secrets.GPG_SECRET}}</gpg.passphrase></properties></profile><profile><id>allow-snapshots</id><activation><activeByDefault>true</activeByDefault></activation><repositories><repository><id>snapshots-repo</id><url>https://central.sonatype.com/repository/maven-snapshots</url><releases><enabled>false</enabled></releases><snapshots><enabled>true</enabled></snapshots></repository><repository><id>releases-repo</id><url>https://central.sonatype.com/api/v1/publisher</url><releases><enabled>true</enabled></releases><snapshots><enabled>false</enabled></snapshots></repository><repository><id>danubetech-maven-public</id><url>https://repo.danubetech.com/repository/maven-public/</url></repository><repository><id>nexus-snapshots</id><url>https://oss.sonatype.org/content/repositories/snapshots</url></repository></repositories></profile><profile><id>sonar</id><properties><sonar.sources>.</sonar.sources><sonar.host.url>https://sonarcloud.io</sonar.host.url></properties><activation><activeByDefault>false</activeByDefault></activation></profile></profiles></settings>" > $GITHUB_WORKSPACE/settings.xml

    - name: Build check for MOSIP License
      run: cd ${{ inputs.SERVICE_LOCATION }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:licenses[1]/s:license/s:name" -nl pom.xml | grep -q "MPL 2.0"

    - name: Build check for developer
      run: cd ${{ inputs.SERVICE_LOCATION }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:developers[1]/s:developer/s:name" -nl pom.xml | grep -icq "Mosip"

    - name: Build check for commit plugin
      run: cd ${{ inputs.SERVICE_LOCATION }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:build/s:plugins/s:plugin[s:groupId='pl.project13.maven']/s:artifactId" -nl pom.xml | grep -q "git-commit-id-plugin"

    - name: Build check for sign plugin
      run: cd ${{ inputs.SERVICE_LOCATION }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:build/s:plugins/s:plugin[s:groupId='org.apache.maven.plugins']/s:artifactId" -nl pom.xml | grep -q "maven-gpg-plugin"

    - name: Build check for name, url, and description in pom.xml
      run: |
        cd ${{ inputs.SERVICE_LOCATION }}
        echo "Checking for project name in pom.xml"
        xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:name" -nl pom.xml | grep -q "."
        echo "Project name found"
        echo "Checking for project URL in pom.xml"
        xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:url" -nl pom.xml | grep -q "."
        echo "Project url found"
        echo "Checking for project description in pom.xml"
        xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:description" -nl pom.xml | grep -q "."
        echo "Project description found"

    - name: Validate pom.xml & settings.xml via xmllint
      run: |
        find ${{ inputs.SERVICE_LOCATION }} -type f -name pom.xml | while read -r F; do
          echo "Pom file : $F"
          xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]' $F
        done

    - name: Build with Maven
      run: cd ${{ inputs.SERVICE_LOCATION }} && mvn -U -B package -Dmaven.wagon.http.retryHandler.count=2 --file pom.xml -s $GITHUB_WORKSPACE/settings.xml

    - name: Debug - List all JARs and permissions
      if: ${{ !contains(github.ref, 'master') && !contains(github.ref, 'main') }}
      run: |
        echo "=== All JAR files in target directories with permissions ==="
        find ${{ inputs.SERVICE_LOCATION }} -path '*/target/*' -name '*.jar' -type f -ls || echo "No JAR files found"
        echo ""
        echo "=== JAR files with executable bit set ==="
        find ${{ inputs.SERVICE_LOCATION }} -path '*/target/*' -name '*.jar' -type f -executable -ls || echo "No executable JARs found"

    - name: Ready the springboot executable artifacts
      if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
      run: |
        ## FIND JARS & COPY ONLY EXECUTABLE JARs STORED UNDER TARGET DIRECTORY 
        find ${{ inputs.SERVICE_LOCATION }} -path '*/target/*' -name '*.jar'  -type f  -executable -exec zip ${{ inputs.BUILD_ARTIFACT }}.zip {} +    

    - name: Ready the springboot non-executable artifacts
      if: ${{ inputs.MAVEN_NON_EXEC_ARTIFACTS }}
      run: |
        echo "Preparing non-executable artifacts for zipping..."
        IFS=',' read -ra ARTIFACTS <<< "${{ inputs.MAVEN_NON_EXEC_ARTIFACTS }}"

        for ARTIFACT in "${ARTIFACTS[@]}"; do
          ARTIFACT=$(echo "$ARTIFACT" | xargs) # trim spaces
          # Remove .jar extension to create base name for pattern matching
          BASE_NAME="${ARTIFACT%.jar}"
          echo "Searching for artifact pattern: ${BASE_NAME}*.jar"
  
          # Search for versioned JARs, excluding sources, javadoc, and tests
          found_files=$(find ${{ inputs.SERVICE_LOCATION }} -type f -path "*/target/${BASE_NAME}*.jar" ! -executable 2>/dev/null \
          | grep -Ev '(-sources|-javadoc|-tests)\.jar$' || true)
  
          if [ -n "$found_files" ]; then
            echo "Found non-executable artifact(s):"
            echo "$found_files"
    
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                echo "Adding to zip with full path: $file"
                zip -r ${{ inputs.BUILD_ARTIFACT }}.zip "$file"
              fi
            done <<< "$found_files"
          else
            echo "Warning: Non-executable artifact matching ${BASE_NAME}*.jar not found in any target directory"
          fi
        done
        echo "Non-executable artifacts have been added to: ${{ inputs.BUILD_ARTIFACT }}.zip"

    - name: Upload the springboot jars
      if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.BUILD_ARTIFACT }}
        path: ./${{ inputs.BUILD_ARTIFACT }}.zip

    - uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,author,commit,workflow,job # selectable (default: repo,message)
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      if: "${{ github.event_name != 'pull_request' && failure() }}" # Pick up events even if the job fails or is canceled.
