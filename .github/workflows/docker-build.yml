name: Build docker and push image to Docker Hub

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      SERVICE_LOCATION:
        required: true
        type: string
      BUILD_ARTIFACT:
        required: false
        type: string
        default: "false"
      NPM_BUILD:
        required: false
        type: boolean
        default: false
      ONLY_DOCKER:
        required: false
        type: boolean
        default: false
      BASE_IMAGE_BUILD:
        required: false
        type: boolean
        default: false
      SQUASH_LAYERS:
        required: false
        type: string
      PLATFORMS:
        required: false
        type: string
        default: "linux/amd64,linux/arm64"

    secrets:
      RELEASE_DOCKER_HUB:
        required: true
      ACTOR_DOCKER_HUB:
        required: true
      DEV_NAMESPACE_DOCKER_HUB:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  build-dockers:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.DEV_NAMESPACE_DOCKER_HUB }}
      SERVICE_LOCATION: ${{ inputs.SERVICE_LOCATION }}
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      PLATFORMS: ${{ inputs.PLATFORMS }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        if: ${{ ( inputs.BUILD_ARTIFACT != 'false' ) }}
        with:
          name: ${{ inputs.BUILD_ARTIFACT }}
          path: ./

      - name: Install docker-squash
        run: pip install docker-squash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
          echo "${{ toJSON(inputs) }}"
          
          # Parse platforms into an array
          IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
          echo "PLATFORM_COUNT=${#PLATFORM_ARRAY[@]}" >> $GITHUB_ENV
          echo "Platforms to build: ${PLATFORM_ARRAY[@]} (Count: ${#PLATFORM_ARRAY[@]})"
          
      - name: Check Dockerfile for forbidden organizations and tags
        if: |
          (github.event_name == 'push' && startsWith(github.ref_name, 'release')) ||
          (github.event_name == 'pull_request' && startsWith(github.base_ref, 'release')) ||
          (github.event_name == 'workflow_dispatch' && startsWith(github.ref, 'refs/heads/release'))
        run: |
          cd ${{ inputs.SERVICE_LOCATION }} 
          if [ ! -f Dockerfile ]; then
            echo "Error: Dockerfile not found."
            exit 1
          elif grep -E "FROM (mosipdev|mosipqa)/" Dockerfile || grep -E "FROM .*:(latest|develop)" Dockerfile; then
            echo "Error: Dockerfile contains forbidden base image from 'mosipdev' or 'mosipqa' org or uses 'latest' or 'develop' tag."
            exit 1
          else
            echo "Dockerfile check passed: No forbidden organizations or tags found."
          fi
    
      - name: Get version info from pom
        if: ${{ contains(inputs.NPM_BUILD, 'false') && ( inputs.BUILD_ARTIFACT != 'false' )  && ( inputs.ONLY_DOCKER == false ) }}
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract for docker build
        if: ${{ contains(inputs.NPM_BUILD, 'false' ) && ( inputs.BUILD_ARTIFACT != 'false' )  && ( inputs.ONLY_DOCKER == true )}}
        run: |
          unzip "${{ inputs.BUILD_ARTIFACT }}.zip" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Unzip and extract for maven
        if: ${{ contains(inputs.NPM_BUILD, 'false' ) && ( inputs.BUILD_ARTIFACT != 'false' ) && ( inputs.ONLY_DOCKER == false ) }}
        run: |
          unzip -uj "${{ inputs.BUILD_ARTIFACT }}.zip" "${{ inputs.SERVICE_LOCATION }}/target/*" -d "${{ env.SERVICE_LOCATION }}/target/"

      - name: Unzip and extract for npm
        if: ${{ contains(inputs.NPM_BUILD, 'true' ) && ( inputs.BUILD_ARTIFACT != false )  && ( inputs.ONLY_DOCKER == false )}}
        run: |
          unzip "${{ inputs.BUILD_ARTIFACT }}.zip" "dist/*" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Get current date
        run: echo "BUILD_TIME=$(date +'%Y-%m-%d-%H-%M-%S')"  >> $GITHUB_ENV

      - name: Check Dockerfile for 'mosip' user definition
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
          DOCKERFILES=$(git ls-files | grep -w "Dockerfile")

          chk_layer=(
            "ARG\s+container_user=mosip"
            "ARG\s+container_user_group=mosip"
            "ARG\s+container_user_uid=1001"
            "ARG\s+container_user_gid=1001"
            "ENV\s+container_user=\\\${container_user}"
            "ENV\s+container_user_group=\\\${container_user_group}"
            "ENV\s+container_user_uid=\\\${container_user_uid}"
            "ENV\s+container_user_gid=\\\${container_user_gid}"
            "WORKDIR\s+/home/\\\${container_user}"
            "chown\s+-R\s+\\\${container_user}:\\\${container_user}\s+/home/\\\${container_user}"
            "USER\s+\\\${container_user_uid}:\\\${container_user_gid}"
          )

          for FILE in $DOCKERFILES; do
            for layer in "${chk_layer[@]}"; do
              layer_count=$(grep -Ev '^$' "$FILE" | grep -Ec "$layer" || true)
          
              if [[ $layer_count -ne 1 ]]; then
                dlayer=$(echo $layer | sed -E 's/\\s\+/ /g' | sed -E 's/\\//g')
                echo "Docker layer: \"$dlayer\" not found in $FILE; EXITING"
                exit 1
              fi
            done
          done
        if: ${{ inputs.BASE_IMAGE_BUILD == false }}

      - name: Build check for Docker datetime & git commit labels
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
           chk_layer=( "ARG\\s+SOURCE"
                       "ARG\\s+COMMIT_HASH"
                       "ARG\\s+COMMIT_ID"
                       "ARG\\s+BUILD_TIME"
                       "LABEL\\s+source=\\\${SOURCE}"
                       "LABEL\\s+commit_hash=\\\${COMMIT_HASH}"
                       "LABEL\\s+commit_id=\\\${COMMIT_ID}" 
                       "LABEL\\s+build_time=\\\${BUILD_TIME}"
          )
          
          for layer in "${chk_layer[@]}"; do
            layer_count=$( grep -Ev '^$' Dockerfile | grep -Ec "$layer" || true);
          
            if [[ $layer_count -ne 1 ]]; then
              dlayer=$( echo $layer | sed -E 's/\\s\+/ /g' | sed -E 's/\\//g' )
              echo "Docker layer : \"$dlayer\" not found; EXITING";
              exit 1;
            fi
          done
        if: ${{ inputs.BASE_IMAGE_BUILD == false }}
          
      - name: Build Docker images
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
          
          # Prepare Docker build arguments
          if [[ ${{ inputs.BASE_IMAGE_BUILD }} == false ]]; then
            DOCKER_LABEL="--build-arg SOURCE=mosip --build-arg COMMIT_HASH=$(git rev-parse HEAD) --build-arg COMMIT_ID=$(git rev-parse --short HEAD) --build-arg BUILD_TIME=$BUILD_TIME"
          else
            DOCKER_LABEL="--build-arg SOURCE=mosip"
          fi
          
          # Split platforms string into array
          IFS=',' read -ra PLATFORMS <<< "$PLATFORMS"
          PLATFORMS_COUNT=${#PLATFORMS[@]}
          echo "Building for $PLATFORMS_COUNT platform(s): ${PLATFORMS[@]}"
          
          # Check if this is a single platform build
          if [[ $PLATFORMS_COUNT -eq 1 ]]; then
            echo "Single platform build for ${PLATFORMS[0]}"
            docker buildx build --platform ${PLATFORMS[0]} --load $DOCKER_LABEL -t ${{ env.SERVICE_NAME }} .
          else
            echo "Multi-platform build"
            # Build for each platform separately
            for PLATFORM in "${PLATFORMS[@]}"; do
              PLATFORM_TAG=$(echo $PLATFORM | tr '/' '_')
              echo "Building for $PLATFORM architecture..."
              docker buildx build --platform $PLATFORM --load $DOCKER_LABEL -t ${{ env.SERVICE_NAME }}:${PLATFORM_TAG} .
            done
          fi

      - name: Log into registry
        if: "${{ github.event_name != 'pull_request' }}"
        run: echo "${{ secrets.RELEASE_DOCKER_HUB }}" | docker login -u ${{ secrets.ACTOR_DOCKER_HUB }} --password-stdin

      - name: Process and push Docker images
        if: "${{ github.event_name != 'pull_request' }}"
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
          
          # Set image ID and version for pushing
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          if [[ $BRANCH_NAME == master ]]; then
            VERSION=latest
          else
            VERSION=$BRANCH_NAME
          fi
          
          echo "IMAGE_ID=$IMAGE_ID"
          echo "VERSION=$VERSION"
          
          # Split platforms string into array
          IFS=',' read -ra PLATFORMS <<< "$PLATFORMS"
          PLATFORMS_COUNT=${#PLATFORMS[@]}
          
          # Single platform case
          if [[ $PLATFORMS_COUNT -eq 1 ]]; then
            # Tag the temporary image with the final name
            docker tag ${{ env.SERVICE_NAME }} $IMAGE_ID:$VERSION
            
            # Apply squashing if specified
            if [[ -n "${{ inputs.SQUASH_LAYERS }}" ]]; then
              echo "Squashing single platform image for ${PLATFORMS[0]}"
              docker-squash -f ${{ inputs.SQUASH_LAYERS }} -t $IMAGE_ID:$VERSION $IMAGE_ID:$VERSION
            fi
            
            # Push the image
            echo "Pushing single platform image for ${PLATFORMS[0]}"
            docker push $IMAGE_ID:$VERSION
          else
            # Multi-platform case
            MANIFEST_TAGS=""
            
            for PLATFORM in "${PLATFORMS[@]}"; do
              PLATFORM_TAG=$(echo $PLATFORM | tr '/' '_')
              FINAL_TAG="$IMAGE_ID:${VERSION}_$PLATFORM_TAG"
              
              # Tag with final name
              docker tag ${{ env.SERVICE_NAME }}:${PLATFORM_TAG} $FINAL_TAG
              
              # Apply squashing if specified
              if [[ -n "${{ inputs.SQUASH_LAYERS }}" ]]; then
                echo "Squashing $PLATFORM image..."
                docker-squash -f ${{ inputs.SQUASH_LAYERS }} -t $FINAL_TAG $FINAL_TAG
              fi
              
              # Push platform-specific image
              echo "Pushing $PLATFORM image..."
              docker push $FINAL_TAG
              
              # Add to manifest tags list
              MANIFEST_TAGS="$MANIFEST_TAGS $FINAL_TAG"
            done
            
            # Create manifest with all images
            echo "Creating manifest with images:$MANIFEST_TAGS"
            docker manifest create $IMAGE_ID:$VERSION $MANIFEST_TAGS
            
            # Inspect and push manifest
            echo "Inspecting manifest..."
            docker manifest inspect $IMAGE_ID:$VERSION
            
            echo "Pushing manifest..."
            docker manifest push $IMAGE_ID:$VERSION
          fi

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,author,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: "${{ github.event_name != 'pull_request' && failure() }}" # Pick up events even if the job fails or is canceled.
